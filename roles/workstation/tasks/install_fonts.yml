---
- name: Install fonts via Homebrew Cask (macOS)
  community.general.homebrew_cask:
    name: "{{ item[current_os].package }}"
    state: latest
  loop: "{{ fonts }}"
  when: 
    - current_os == 'macos'
    - item[current_os] is defined
    - item[current_os].type == 'homebrew_cask'
  loop_control:
    label: "{{ item.name }}"

- name: Create fonts directory (Linux)
  ansible.builtin.file:
    path: "{{ item[current_os].dest | expanduser }}"
    state: directory
  loop: "{{ fonts }}"
  when:
    - current_os in ['fedora', 'arch']
    - item[current_os] is defined
    - item[current_os].type == 'download'
  loop_control:
    label: "{{ item.name }}"

- name: Download and extract fonts (Linux)
  ansible.builtin.unarchive:
    src: "{{ item[current_os].url }}"
    dest: "{{ item[current_os].dest | expanduser }}"
    remote_src: yes
    creates: "{{ item[current_os].dest | expanduser }}/{{ item[current_os].creates | default(item.name + '.ttf') }}"
  loop: "{{ fonts }}"
  when:
    - current_os in ['fedora', 'arch']
    - item[current_os] is defined
    - item[current_os].type == 'download'
  loop_control:
    label: "{{ item.name }}"

- name: Install fonts via pacman (Arch)
  community.general.pacman:
    name: "{{ item[current_os].package }}"
    state: present
  loop: "{{ fonts }}"
  when:
    - current_os == 'arch'
    - item[current_os] is defined
    - item[current_os].type == 'pacman'
  loop_control:
    label: "{{ item.name }}"
  become: yes

- name: Install fonts via AUR (Arch)
  kewlfft.aur.aur:
    name: "{{ item[current_os].package }}"
    state: present
  loop: "{{ fonts }}"
  when:
    - current_os == 'arch'
    - item[current_os] is defined
    - item[current_os].type == 'aur'
  loop_control:
    label: "{{ item.name }}"

- name: Update font cache (Linux)
  ansible.builtin.command: fc-cache -fv
  when: current_os in ['fedora', 'arch']
  changed_when: false